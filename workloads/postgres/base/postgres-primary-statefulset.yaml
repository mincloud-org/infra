apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-primary
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: primary
spec:
  serviceName: postgres-primary
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: primary
  template:
    metadata:
    spec:
      terminationGracePeriodSeconds: 60
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: postgres
            app.kubernetes.io/component: primary
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: postgres
                  app.kubernetes.io/component: primary
              topologyKey: kubernetes.io/hostname
      securityContext:
        runAsUser: 999
        runAsNonRoot: true
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: postgres
        image: postgres:16-alpine
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop: ["ALL"]
            add: []
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: POSTGRES_DB
          value: "postgres"
        - name: REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: replication-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --locale=en_US.UTF-8"
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
        - name: config
          mountPath: /config
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        command:
        - sh
        - -c
        - |
          set -e
          umask 077
          echo "Ensuring PGDATA permissions are secure (0750) at $PGDATA"
          mkdir -p "$PGDATA" && chmod 0750 "$PGDATA"
          exec docker-entrypoint.sh postgres
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -c
              - |
                echo "PreStop: waiting for PostgreSQL to shutdown gracefully";
                pg_ctl -D "$PGDATA" -m fast -w stop || true;
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U postgres -d postgres -h localhost
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U postgres -d postgres -h localhost
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: config
        configMap:
          name: postgres-config
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
