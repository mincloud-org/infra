apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-sentinel-config
  labels:
    app: redis-sentinel
    app.kubernetes.io/name: redis-sentinel
    app.kubernetes.io/component: sentinel
data:
  sentinel.conf: |
    # Base Redis Sentinel Configuration (init writes the final file with dynamic namespace)
    bind 0.0.0.0
    port 26379
    loglevel notice
    protected-mode no
    
  init-sentinel.sh: |
    #!/bin/sh
    set -euo pipefail
    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    
    # Determine current namespace dynamically
    NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
    # Candidate hostnames for the master, prefer headless Pod DNS first
    CANDIDATES="redis-master-0.redis-master-headless.${NAMESPACE}.svc redis-master.${NAMESPACE}.svc redis-master"

    echo "Resolver info:" && echo "=== /etc/resolv.conf ===" && cat /etc/resolv.conf || true

    MASTER_HOST=""
    MASTER_IP=""
    MAX_SECONDS=180
    SLEEP_SECONDS=5
    START_TS=$(date +%s)
    while :; do
      for H in $CANDIDATES; do
        echo "Trying master host candidate: $H"
        IP=$(getent hosts "$H" 2>/dev/null | awk '{print $1; exit}') || true
        if [ -n "${IP:-}" ]; then
          echo "Resolved $H to $IP, checking Redis PING..."
          if redis-cli -h "$H" -p 6379 ping >/dev/null 2>&1; then
            MASTER_HOST="$H"
            MASTER_IP="$IP"
            break 2
          else
            echo "$H ($IP) not responding on 6379 yet."
          fi
        else
          echo "Failed to resolve $H"
        fi
      done
      NOW_TS=$(date +%s)
      ELAPSED=$(( NOW_TS - START_TS ))
      if [ "$ELAPSED" -ge "$MAX_SECONDS" ]; then
        echo "ERROR: Timeout after ${ELAPSED}s waiting for master DNS/availability." >&2
        break
      fi
      echo "Retrying in ${SLEEP_SECONDS}s... (elapsed=${ELAPSED}s)"
      sleep "$SLEEP_SECONDS"
    done

    if [ -z "${MASTER_IP:-}" ]; then
      echo "ERROR: Could not resolve or connect to any master host candidates before timeout." >&2
      exit 1
    fi

    echo "Using master host $MASTER_HOST with IP $MASTER_IP"

    echo "Redis Master is ready, writing Sentinel config..."

      # Generate the final sentinel.conf; write the resolved IP to avoid runtime DNS issues
      printf "%s\n" \
        "# Generated by init-sentinel.sh" \
        "bind 0.0.0.0" \
        "port 26379" \
        "" \
        "# original host: ${MASTER_HOST}" \
        "sentinel monitor mymaster ${MASTER_IP} 6379 2" \
        "sentinel down-after-milliseconds mymaster 30000" \
        "sentinel parallel-syncs mymaster 1" \
        "sentinel failover-timeout mymaster 180000" \
        "" \
        "loglevel notice" \
        "protected-mode no" \
      > /etc/redis-sentinel/sentinel.conf

    echo "Sentinel configuration written:"
    head -n 40 /etc/redis-sentinel/sentinel.conf || true
