apiVersion: apps/v1
kind: Deployment
metadata:
  name: pg-admin
  labels:
    app.kubernetes.io/name: pg-admin
    app.kubernetes.io/component: web
    app.kubernetes.io/part-of: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pg-admin
      app.kubernetes.io/component: web
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pg-admin
        app.kubernetes.io/component: web
    spec:
      containers:
        - name: pg-admin
          image: dpage/pgadmin4:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: PGADMIN_LISTEN_PORT
              value: "8080"
            - name: PGADMIN_LISTEN_ADDRESS
              value: "0.0.0.0"
            - name: PGADMIN_SERVER_JSON_FILE
              value: "/pgadmin4/servers.json"
            - name: PGADMIN_DISABLE_POSTFIX
              value: "true"
            - name: GUNICORN_ACCESS_LOGFILE
              value: "-"
          envFrom:
            - secretRef:
                name: pg-admin-secret
          volumeMounts:
            - name: data
              mountPath: /var/lib/pgadmin
            - name: servers
              mountPath: /pgadmin4/servers.json
              subPath: servers.json
          livenessProbe:
            httpGet:
              path: /login
              port: http
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /login
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 250m
              memory: 512Mi
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: pg-admin-data
        - name: servers
          configMap:
            name: pg-admin-servers
